// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package auth0

import (
	"github.com/gorilla/mux"
	mock "github.com/stretchr/testify/mock"
)

// NewIAuth0ScopeValidator creates a new instance of IAuth0ScopeValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAuth0ScopeValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAuth0ScopeValidator {
	mock := &IAuth0ScopeValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IAuth0ScopeValidator is an autogenerated mock type for the IAuth0ScopeValidator type
type IAuth0ScopeValidator struct {
	mock.Mock
}

type IAuth0ScopeValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *IAuth0ScopeValidator) EXPECT() *IAuth0ScopeValidator_Expecter {
	return &IAuth0ScopeValidator_Expecter{mock: &_m.Mock}
}

// Handler provides a mock function for the type IAuth0ScopeValidator
func (_mock *IAuth0ScopeValidator) Handler() mux.MiddlewareFunc {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Handler")
	}

	var r0 mux.MiddlewareFunc
	if returnFunc, ok := ret.Get(0).(func() mux.MiddlewareFunc); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mux.MiddlewareFunc)
		}
	}
	return r0
}

// IAuth0ScopeValidator_Handler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handler'
type IAuth0ScopeValidator_Handler_Call struct {
	*mock.Call
}

// Handler is a helper method to define mock.On call
func (_e *IAuth0ScopeValidator_Expecter) Handler() *IAuth0ScopeValidator_Handler_Call {
	return &IAuth0ScopeValidator_Handler_Call{Call: _e.mock.On("Handler")}
}

func (_c *IAuth0ScopeValidator_Handler_Call) Run(run func()) *IAuth0ScopeValidator_Handler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IAuth0ScopeValidator_Handler_Call) Return(middlewareFunc mux.MiddlewareFunc) *IAuth0ScopeValidator_Handler_Call {
	_c.Call.Return(middlewareFunc)
	return _c
}

func (_c *IAuth0ScopeValidator_Handler_Call) RunAndReturn(run func() mux.MiddlewareFunc) *IAuth0ScopeValidator_Handler_Call {
	_c.Call.Return(run)
	return _c
}
