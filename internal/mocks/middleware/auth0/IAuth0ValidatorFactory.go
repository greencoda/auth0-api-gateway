// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	configauth0 "github.com/greencoda/auth0-api-gateway/internal/config/auth0"
	auth0 "github.com/greencoda/auth0-api-gateway/internal/middleware/auth0"

	mock "github.com/stretchr/testify/mock"

	subrouter "github.com/greencoda/auth0-api-gateway/internal/config/subrouter"
)

// IAuth0ValidatorFactory is an autogenerated mock type for the IAuth0ValidatorFactory type
type IAuth0ValidatorFactory struct {
	mock.Mock
}

// NewAuth0ScopeValidator provides a mock function with given fields: config
func (_m *IAuth0ValidatorFactory) NewAuth0ScopeValidator(config subrouter.AuthorizationConfig) auth0.IAuth0ScopeValidator {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for NewAuth0ScopeValidator")
	}

	var r0 auth0.IAuth0ScopeValidator
	if rf, ok := ret.Get(0).(func(subrouter.AuthorizationConfig) auth0.IAuth0ScopeValidator); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth0.IAuth0ScopeValidator)
		}
	}

	return r0
}

// NewAuth0TokenValidator provides a mock function with given fields: config
func (_m *IAuth0ValidatorFactory) NewAuth0TokenValidator(config configauth0.Config) (auth0.IAuth0TokenValidator, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for NewAuth0TokenValidator")
	}

	var r0 auth0.IAuth0TokenValidator
	var r1 error
	if rf, ok := ret.Get(0).(func(configauth0.Config) (auth0.IAuth0TokenValidator, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(configauth0.Config) auth0.IAuth0TokenValidator); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth0.IAuth0TokenValidator)
		}
	}

	if rf, ok := ret.Get(1).(func(configauth0.Config) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIAuth0ValidatorFactory creates a new instance of IAuth0ValidatorFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAuth0ValidatorFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAuth0ValidatorFactory {
	mock := &IAuth0ValidatorFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
