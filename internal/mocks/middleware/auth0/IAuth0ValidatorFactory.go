// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package auth0

import (
	auth00 "github.com/greencoda/auth0-api-gateway/internal/config/auth0"
	"github.com/greencoda/auth0-api-gateway/internal/config/subrouter"
	"github.com/greencoda/auth0-api-gateway/internal/middleware/auth0"
	mock "github.com/stretchr/testify/mock"
)

// NewIAuth0ValidatorFactory creates a new instance of IAuth0ValidatorFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAuth0ValidatorFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAuth0ValidatorFactory {
	mock := &IAuth0ValidatorFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IAuth0ValidatorFactory is an autogenerated mock type for the IAuth0ValidatorFactory type
type IAuth0ValidatorFactory struct {
	mock.Mock
}

type IAuth0ValidatorFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *IAuth0ValidatorFactory) EXPECT() *IAuth0ValidatorFactory_Expecter {
	return &IAuth0ValidatorFactory_Expecter{mock: &_m.Mock}
}

// NewAuth0ScopeValidator provides a mock function for the type IAuth0ValidatorFactory
func (_mock *IAuth0ValidatorFactory) NewAuth0ScopeValidator(config subrouter.AuthorizationConfig) auth0.IAuth0ScopeValidator {
	ret := _mock.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for NewAuth0ScopeValidator")
	}

	var r0 auth0.IAuth0ScopeValidator
	if returnFunc, ok := ret.Get(0).(func(subrouter.AuthorizationConfig) auth0.IAuth0ScopeValidator); ok {
		r0 = returnFunc(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth0.IAuth0ScopeValidator)
		}
	}
	return r0
}

// IAuth0ValidatorFactory_NewAuth0ScopeValidator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewAuth0ScopeValidator'
type IAuth0ValidatorFactory_NewAuth0ScopeValidator_Call struct {
	*mock.Call
}

// NewAuth0ScopeValidator is a helper method to define mock.On call
//   - config subrouter.AuthorizationConfig
func (_e *IAuth0ValidatorFactory_Expecter) NewAuth0ScopeValidator(config interface{}) *IAuth0ValidatorFactory_NewAuth0ScopeValidator_Call {
	return &IAuth0ValidatorFactory_NewAuth0ScopeValidator_Call{Call: _e.mock.On("NewAuth0ScopeValidator", config)}
}

func (_c *IAuth0ValidatorFactory_NewAuth0ScopeValidator_Call) Run(run func(config subrouter.AuthorizationConfig)) *IAuth0ValidatorFactory_NewAuth0ScopeValidator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 subrouter.AuthorizationConfig
		if args[0] != nil {
			arg0 = args[0].(subrouter.AuthorizationConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *IAuth0ValidatorFactory_NewAuth0ScopeValidator_Call) Return(iAuth0ScopeValidator auth0.IAuth0ScopeValidator) *IAuth0ValidatorFactory_NewAuth0ScopeValidator_Call {
	_c.Call.Return(iAuth0ScopeValidator)
	return _c
}

func (_c *IAuth0ValidatorFactory_NewAuth0ScopeValidator_Call) RunAndReturn(run func(config subrouter.AuthorizationConfig) auth0.IAuth0ScopeValidator) *IAuth0ValidatorFactory_NewAuth0ScopeValidator_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuth0TokenValidator provides a mock function for the type IAuth0ValidatorFactory
func (_mock *IAuth0ValidatorFactory) NewAuth0TokenValidator(config auth00.Config) (auth0.IAuth0TokenValidator, error) {
	ret := _mock.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for NewAuth0TokenValidator")
	}

	var r0 auth0.IAuth0TokenValidator
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(auth00.Config) (auth0.IAuth0TokenValidator, error)); ok {
		return returnFunc(config)
	}
	if returnFunc, ok := ret.Get(0).(func(auth00.Config) auth0.IAuth0TokenValidator); ok {
		r0 = returnFunc(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth0.IAuth0TokenValidator)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(auth00.Config) error); ok {
		r1 = returnFunc(config)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IAuth0ValidatorFactory_NewAuth0TokenValidator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewAuth0TokenValidator'
type IAuth0ValidatorFactory_NewAuth0TokenValidator_Call struct {
	*mock.Call
}

// NewAuth0TokenValidator is a helper method to define mock.On call
//   - config auth00.Config
func (_e *IAuth0ValidatorFactory_Expecter) NewAuth0TokenValidator(config interface{}) *IAuth0ValidatorFactory_NewAuth0TokenValidator_Call {
	return &IAuth0ValidatorFactory_NewAuth0TokenValidator_Call{Call: _e.mock.On("NewAuth0TokenValidator", config)}
}

func (_c *IAuth0ValidatorFactory_NewAuth0TokenValidator_Call) Run(run func(config auth00.Config)) *IAuth0ValidatorFactory_NewAuth0TokenValidator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 auth00.Config
		if args[0] != nil {
			arg0 = args[0].(auth00.Config)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *IAuth0ValidatorFactory_NewAuth0TokenValidator_Call) Return(iAuth0TokenValidator auth0.IAuth0TokenValidator, err error) *IAuth0ValidatorFactory_NewAuth0TokenValidator_Call {
	_c.Call.Return(iAuth0TokenValidator, err)
	return _c
}

func (_c *IAuth0ValidatorFactory_NewAuth0TokenValidator_Call) RunAndReturn(run func(config auth00.Config) (auth0.IAuth0TokenValidator, error)) *IAuth0ValidatorFactory_NewAuth0TokenValidator_Call {
	_c.Call.Return(run)
	return _c
}
