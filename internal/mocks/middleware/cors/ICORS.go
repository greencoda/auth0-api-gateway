// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package cors

import (
	"github.com/gorilla/mux"
	mock "github.com/stretchr/testify/mock"
)

// NewICORS creates a new instance of ICORS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICORS(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICORS {
	mock := &ICORS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ICORS is an autogenerated mock type for the ICORS type
type ICORS struct {
	mock.Mock
}

type ICORS_Expecter struct {
	mock *mock.Mock
}

func (_m *ICORS) EXPECT() *ICORS_Expecter {
	return &ICORS_Expecter{mock: &_m.Mock}
}

// Handler provides a mock function for the type ICORS
func (_mock *ICORS) Handler() mux.MiddlewareFunc {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Handler")
	}

	var r0 mux.MiddlewareFunc
	if returnFunc, ok := ret.Get(0).(func() mux.MiddlewareFunc); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mux.MiddlewareFunc)
		}
	}
	return r0
}

// ICORS_Handler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handler'
type ICORS_Handler_Call struct {
	*mock.Call
}

// Handler is a helper method to define mock.On call
func (_e *ICORS_Expecter) Handler() *ICORS_Handler_Call {
	return &ICORS_Handler_Call{Call: _e.mock.On("Handler")}
}

func (_c *ICORS_Handler_Call) Run(run func()) *ICORS_Handler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ICORS_Handler_Call) Return(middlewareFunc mux.MiddlewareFunc) *ICORS_Handler_Call {
	_c.Call.Return(middlewareFunc)
	return _c
}

func (_c *ICORS_Handler_Call) RunAndReturn(run func() mux.MiddlewareFunc) *ICORS_Handler_Call {
	_c.Call.Return(run)
	return _c
}
