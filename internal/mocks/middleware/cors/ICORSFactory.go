// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package cors

import (
	"github.com/greencoda/auth0-api-gateway/internal/config/subrouter"
	"github.com/greencoda/auth0-api-gateway/internal/middleware/cors"
	mock "github.com/stretchr/testify/mock"
)

// NewICORSFactory creates a new instance of ICORSFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICORSFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICORSFactory {
	mock := &ICORSFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ICORSFactory is an autogenerated mock type for the ICORSFactory type
type ICORSFactory struct {
	mock.Mock
}

type ICORSFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *ICORSFactory) EXPECT() *ICORSFactory_Expecter {
	return &ICORSFactory_Expecter{mock: &_m.Mock}
}

// NewCORS provides a mock function for the type ICORSFactory
func (_mock *ICORSFactory) NewCORS(config subrouter.CORSConfig) cors.ICORS {
	ret := _mock.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for NewCORS")
	}

	var r0 cors.ICORS
	if returnFunc, ok := ret.Get(0).(func(subrouter.CORSConfig) cors.ICORS); ok {
		r0 = returnFunc(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cors.ICORS)
		}
	}
	return r0
}

// ICORSFactory_NewCORS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewCORS'
type ICORSFactory_NewCORS_Call struct {
	*mock.Call
}

// NewCORS is a helper method to define mock.On call
//   - config subrouter.CORSConfig
func (_e *ICORSFactory_Expecter) NewCORS(config interface{}) *ICORSFactory_NewCORS_Call {
	return &ICORSFactory_NewCORS_Call{Call: _e.mock.On("NewCORS", config)}
}

func (_c *ICORSFactory_NewCORS_Call) Run(run func(config subrouter.CORSConfig)) *ICORSFactory_NewCORS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 subrouter.CORSConfig
		if args[0] != nil {
			arg0 = args[0].(subrouter.CORSConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ICORSFactory_NewCORS_Call) Return(iCORS cors.ICORS) *ICORSFactory_NewCORS_Call {
	_c.Call.Return(iCORS)
	return _c
}

func (_c *ICORSFactory_NewCORS_Call) RunAndReturn(run func(config subrouter.CORSConfig) cors.ICORS) *ICORSFactory_NewCORS_Call {
	_c.Call.Return(run)
	return _c
}
