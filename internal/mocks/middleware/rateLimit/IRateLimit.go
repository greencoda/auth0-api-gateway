// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	mux "github.com/gorilla/mux"
	mock "github.com/stretchr/testify/mock"
)

// IRateLimit is an autogenerated mock type for the IRateLimit type
type IRateLimit struct {
	mock.Mock
}

// Handler provides a mock function with no fields
func (_m *IRateLimit) Handler() mux.MiddlewareFunc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Handler")
	}

	var r0 mux.MiddlewareFunc
	if rf, ok := ret.Get(0).(func() mux.MiddlewareFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mux.MiddlewareFunc)
		}
	}

	return r0
}

// NewIRateLimit creates a new instance of IRateLimit. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRateLimit(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRateLimit {
	mock := &IRateLimit{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
