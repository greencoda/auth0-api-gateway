// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	subrouter "github.com/greencoda/auth0-api-gateway/internal/config/subrouter"
	rateLimit "github.com/greencoda/auth0-api-gateway/internal/middleware/rateLimit"
	mock "github.com/stretchr/testify/mock"
)

// IRateLimitFactory is an autogenerated mock type for the IRateLimitFactory type
type IRateLimitFactory struct {
	mock.Mock
}

// NewRateLimit provides a mock function with given fields: config
func (_m *IRateLimitFactory) NewRateLimit(config subrouter.RateLimitConfig) rateLimit.IRateLimit {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for NewRateLimit")
	}

	var r0 rateLimit.IRateLimit
	if rf, ok := ret.Get(0).(func(subrouter.RateLimitConfig) rateLimit.IRateLimit); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rateLimit.IRateLimit)
		}
	}

	return r0
}

// NewIRateLimitFactory creates a new instance of IRateLimitFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRateLimitFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRateLimitFactory {
	mock := &IRateLimitFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
