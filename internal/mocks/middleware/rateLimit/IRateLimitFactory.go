// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package rateLimit

import (
	"github.com/greencoda/auth0-api-gateway/internal/config/subrouter"
	"github.com/greencoda/auth0-api-gateway/internal/middleware/rateLimit"
	mock "github.com/stretchr/testify/mock"
)

// NewIRateLimitFactory creates a new instance of IRateLimitFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRateLimitFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRateLimitFactory {
	mock := &IRateLimitFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IRateLimitFactory is an autogenerated mock type for the IRateLimitFactory type
type IRateLimitFactory struct {
	mock.Mock
}

type IRateLimitFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *IRateLimitFactory) EXPECT() *IRateLimitFactory_Expecter {
	return &IRateLimitFactory_Expecter{mock: &_m.Mock}
}

// NewRateLimit provides a mock function for the type IRateLimitFactory
func (_mock *IRateLimitFactory) NewRateLimit(config subrouter.RateLimitConfig) rateLimit.IRateLimit {
	ret := _mock.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for NewRateLimit")
	}

	var r0 rateLimit.IRateLimit
	if returnFunc, ok := ret.Get(0).(func(subrouter.RateLimitConfig) rateLimit.IRateLimit); ok {
		r0 = returnFunc(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rateLimit.IRateLimit)
		}
	}
	return r0
}

// IRateLimitFactory_NewRateLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewRateLimit'
type IRateLimitFactory_NewRateLimit_Call struct {
	*mock.Call
}

// NewRateLimit is a helper method to define mock.On call
//   - config subrouter.RateLimitConfig
func (_e *IRateLimitFactory_Expecter) NewRateLimit(config interface{}) *IRateLimitFactory_NewRateLimit_Call {
	return &IRateLimitFactory_NewRateLimit_Call{Call: _e.mock.On("NewRateLimit", config)}
}

func (_c *IRateLimitFactory_NewRateLimit_Call) Run(run func(config subrouter.RateLimitConfig)) *IRateLimitFactory_NewRateLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 subrouter.RateLimitConfig
		if args[0] != nil {
			arg0 = args[0].(subrouter.RateLimitConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *IRateLimitFactory_NewRateLimit_Call) Return(iRateLimit rateLimit.IRateLimit) *IRateLimitFactory_NewRateLimit_Call {
	_c.Call.Return(iRateLimit)
	return _c
}

func (_c *IRateLimitFactory_NewRateLimit_Call) RunAndReturn(run func(config subrouter.RateLimitConfig) rateLimit.IRateLimit) *IRateLimitFactory_NewRateLimit_Call {
	_c.Call.Return(run)
	return _c
}
