// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package requestLogger

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewIRequestLogger creates a new instance of IRequestLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRequestLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRequestLogger {
	mock := &IRequestLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IRequestLogger is an autogenerated mock type for the IRequestLogger type
type IRequestLogger struct {
	mock.Mock
}

type IRequestLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *IRequestLogger) EXPECT() *IRequestLogger_Expecter {
	return &IRequestLogger_Expecter{mock: &_m.Mock}
}

// Handler provides a mock function for the type IRequestLogger
func (_mock *IRequestLogger) Handler(h http.Handler) http.Handler {
	ret := _mock.Called(h)

	if len(ret) == 0 {
		panic("no return value specified for Handler")
	}

	var r0 http.Handler
	if returnFunc, ok := ret.Get(0).(func(http.Handler) http.Handler); ok {
		r0 = returnFunc(h)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}
	return r0
}

// IRequestLogger_Handler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handler'
type IRequestLogger_Handler_Call struct {
	*mock.Call
}

// Handler is a helper method to define mock.On call
//   - h http.Handler
func (_e *IRequestLogger_Expecter) Handler(h interface{}) *IRequestLogger_Handler_Call {
	return &IRequestLogger_Handler_Call{Call: _e.mock.On("Handler", h)}
}

func (_c *IRequestLogger_Handler_Call) Run(run func(h http.Handler)) *IRequestLogger_Handler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.Handler
		if args[0] != nil {
			arg0 = args[0].(http.Handler)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *IRequestLogger_Handler_Call) Return(handler http.Handler) *IRequestLogger_Handler_Call {
	_c.Call.Return(handler)
	return _c
}

func (_c *IRequestLogger_Handler_Call) RunAndReturn(run func(h http.Handler) http.Handler) *IRequestLogger_Handler_Call {
	_c.Call.Return(run)
	return _c
}
